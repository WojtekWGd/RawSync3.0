<Window x:Class="MVVMDemo.SettingsDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MVVMDemo"
        mc:Ignorable="d"
        Title="RAW Sync v. 3.0: Settings" Height="300" Width="380"
        WindowStartupLocation="CenterOwner"
        ResizeMode="NoResize"
        x:Name="SettingsWindow">

    <!--==== Validation control template ====-->
    <Window.Resources>
        <ControlTemplate x:Key="validationErrorTemplate">
            <DockPanel>
                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                    <Grid Width="12" Height="12">
                        <Ellipse Width="12" Height="12" Fill="Red" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <TextBlock Foreground="White" FontWeight="Heavy" FontSize="8" HorizontalAlignment="Center" ToolTip="{Binding ElementName=ErrorAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" Text="X" />
                    </Grid>
                    <TextBlock Foreground="Red" FontWeight="Light" Margin="2,0,0,0" Text="{Binding ElementName=ErrorAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" />
                </StackPanel>
                <AdornedElementPlaceholder x:Name="ErrorAdorner" />
            </DockPanel>
        </ControlTemplate>
    </Window.Resources>
    <!--==== End Validation control template ====-->

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="20" />
            <ColumnDefinition Width="auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="20" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="20" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="20" />
        </Grid.RowDefinitions>

        <!-- Row 1 -->
        <TextBlock Grid.Column="1" Grid.Row="1" HorizontalAlignment="Left" VerticalAlignment="Center" Text="Processed file extension:    " />
        <TextBox x:Name="ProcExtTextBox" Grid.Column="2" Grid.Row="1" MinWidth="100" Margin="0,10,0,10" VerticalContentAlignment="Center"
                 local:SelectAllFocusBehavior.Enable="True" Validation.ErrorTemplate="{StaticResource validationErrorTemplate}">
            <!-- Additionally to displaying error tooltip on validation errors, change the border and background style -->
            <TextBox.Style>
                <Style TargetType="{x:Type TextBox}">
                    <Style.Triggers>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="BorderBrush" Value="Red" />
                            <Setter Property="Background" Value="LightPink"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </TextBox.Style>
            <!-- End of changing border style -->
            <TextBox.Text>
                <Binding Path="ProcessedExtensionVM" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                    <Binding.ValidationRules>
                        <local:ProcessedExtensionValidator/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <!-- Row 2 -->
        <TextBlock Grid.Column="1" Grid.Row="2" HorizontalAlignment="Left" VerticalAlignment="Center" Text="RAW file extension:" />
        <TextBox x:Name="RawExtTextBox" Grid.Column="2" Grid.Row="2" MinWidth="100" Margin="0,10,0,10" VerticalContentAlignment="Center"
                 local:SelectAllFocusBehavior.Enable="True" Validation.ErrorTemplate="{StaticResource validationErrorTemplate}">
            <!-- Additionally to displaying error tooltip on validation errors, change the border and background style -->
            <TextBox.Style>
                <Style TargetType="{x:Type TextBox}">
                    <Style.Triggers>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="BorderBrush" Value="Red" />
                            <Setter Property="Background" Value="LightPink"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </TextBox.Style>
            <!-- End of changing border style -->
            <TextBox.Text>
                <Binding Path="RawExtensionVM" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                    <Binding.ValidationRules>
                        <local:RawExtensionValidator/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <!-- Row 3 -->
        <TextBlock Grid.Column="1" Grid.Row="3" HorizontalAlignment="Left" VerticalAlignment="Center" Text="Deletion Operation:" />
        <Border Background="GhostWhite" BorderBrush="Gainsboro" BorderThickness="1" Grid.Column="2" Grid.Row="3" Margin="0,15,0,5" CornerRadius="3">
            <StackPanel Grid.Column="2" Grid.Row="3" VerticalAlignment="Center">
                <CheckBox HorizontalAlignment="Left" Margin="5,5,0,5" VerticalAlignment="Center" Content="Prompt for Delete"
                          IsChecked="{Binding Path=DeletePromptVM}" />
                <CheckBox HorizontalAlignment="Left" Margin="5,5,0,5" VerticalAlignment="Center" Content="Use Recycle Bin"
                          IsChecked="{Binding Path=RecycleBinVM}" />
            </StackPanel>
        </Border>

        <!-- Row 4: Buttons at the bottom of the screen -->
        <StackPanel Grid.Column="2" Grid.Row="4" VerticalAlignment="Bottom" HorizontalAlignment="Center">
            <Button x:Name="SaveAndCloseButton" Content="Save and Close" MinWidth="100" Margin="0,0,0,5" Height="20"
                    Command="{Binding SaveAndCloseSettingsCommand}" CommandParameter="{Binding ElementName=SettingsWindow}">
                <!-- Alternatywny sposób bindowania property IsEnabled do stanu walidacji kontrolek, ale bez uwzględnienia "HasChanged"
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=RawExtTextBox, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=ProcExtTextBox, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
                -->
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=SaveAndCloseButton, Path=IsEnabled}" Value="True">
                                <Setter Property="IsDefault" Value="True" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button Content="Cancel" MinWidth="100" Margin="0,5,0,0" Height="20"
                    Command="{Binding CancelSettingsCommand}" CommandParameter="{Binding ElementName=SettingsWindow}">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=SaveAndCloseButton, Path=IsEnabled}" Value="True">
                                <Setter Property="IsDefault" Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=SaveAndCloseButton, Path=IsEnabled}" Value="False">
                                <Setter Property="IsDefault" Value="True" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>

    </Grid>
</Window>
